#!/bin/bash
set -o nounset

if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

command -v parted >/dev/null 2>&1 || { echo "I require parted but it's not installed.  Aborting." >&2; exit 1; }

parted=$(parted -v | head -n1 | cut -d " " -f 4)
if (( $(bc <<< "$parted < 3") == 1 ))
then
	echo "parted's version is $parted, which may fail to create the partitions correctly (I can't find the specific bug)"
	echo "please upgrade to at least 3.0"
	exit 2
fi

command -v kpartx >/dev/null 2>&1 || { echo "I require kpartx but it's not installed.  Aborting." >&2; exit 1; }
command -v extlinux >/dev/null 2>&1 || { echo "I require extlinux but it's not installed.  Aborting." >&2; exit 1; }
command -v qemu-img >/dev/null 2>&1 || { echo "I require qemu-img but it's not installed.  Aborting." >&2; exit 1; }

image=$BINARIES_DIR/bootable.img
kernel=$BINARIES_DIR/bzImage

if [ ! -f $kernel ]; then
	echo "Kernel not found at $kernel - do you need to run make first?"
	exit 1
fi

mountpoint=$(mktemp -d)
dd if=/dev/zero of=$image bs=1M count=20
sync

cat <<-EOF | parted $image
	mklabel msdos
	mkpart primary ext2 0 100%
	set 1 boot on
	quit
EOF
sync

sleep 2

kpartx=$(kpartx -avs $image)
new_partition=$(echo $kpartx | awk '{print $3}')

mkfs.ext2 /dev/mapper/$new_partition
mount /dev/mapper/$new_partition $mountpoint
pushd $mountpoint > /dev/null
cp $kernel .
mkdir $mountpoint/boot
extlinux --device /dev/mapper/$new_partition --install $mountpoint/boot

cat <<-EOF > $mountpoint/boot/extlinux.conf
 LABEL buildroot
 KERNEL /bzImage
 DEFAULT buildroot
EOF

popd > /dev/null

sync
umount $mountpoint
kpartx -d $image

echo
echo
echo

pushd $BINARIES_DIR > /dev/null
qemu-img convert -f raw $image -O vdi bootable.vdi

echo Built the following bootable images:
file $image
file bootable.vdi

popd > /dev/null

rm -r $mountpoint
echo done!
